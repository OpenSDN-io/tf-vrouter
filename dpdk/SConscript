# Contributed by Semihalf
#
# Copyright (c) 2014, 2015 Juniper Networks, Inc. All rights reserved.
#
import os
import subprocess

Import('VRouterEnv')
Import('dpdk_lib')

env = VRouterEnv.Clone()

if 'enableN3K' in env['ADD_OPTS'] or 'n3k-tests:test' in COMMAND_LINE_TARGETS:
    env.SConscript('n3k/SConscript', exports = ['VRouterEnv', 'dpdk_lib'], duplicate = 0)

# Flags
env.Append(CCFLAGS = '-Werror -Wall')
gpp_version = subprocess.check_output(
    "g++ --version | grep g++ | awk '{print $3}'",
    shell=True).rstrip()
if isinstance(gpp_version, bytes):
    gpp_version = gpp_version.decode()
if int(gpp_version.split(".")[0]) >= 8:
    # auto_ptr is depricated
    env.Append(CCFLAGS = '-Wno-error=deprecated-declarations -Wno-deprecated-declarations')

env.Append(CCFLAGS = '-msse4.2')
if env['OPT'] == 'debug':
    env.Append(CCFLAGS = '-DCOMPILE_DEBUG_LOGS')

env.Append(CCFLAGS = '-DALLOW_EXPERIMENTAL_API')

# Include/lLib paths
env.Append(LIBPATH = [env['TOP_LIB']])
env.Append(LIBPATH = ['../host', '../sandesh', '../dp-core', 'n3k'])

# Libraries
env.Replace(LIBS = ['dp_core', 'dp_sandesh_c', 'dp_core', 'sandesh-c'])
env.Append(LIBS = ['rt', 'dl', 'pthread', 'urcu-qsbr', 'urcu-bp'])
if 'enableN3K' in env['ADD_OPTS'] or 'n3k-tests:test' in COMMAND_LINE_TARGETS:
# Force n3k library build using --whole-archive option
    env.Append(LIBS = ['vr_dpdk_n3k'])
    env.Append(LINKFLAGS = ['-Wl,--whole-archive', '-lvr_dpdk_n3k', '-Wl,--no-whole-archive'])

env.Append(LINKFLAGS = env['DPDK_LINKFLAGS'])

dpdk_objs = env.Object(Glob('*.c'))
dpdk_vrouter = env.Program('contrail-vrouter-dpdk', dpdk_objs)
env.Requires(dpdk_objs, dpdk_lib)

# to make sure that all are built when you do 'scons' @ the top level
env.Default(dpdk_vrouter)

env.Alias('install', env.Install(env['INSTALL_BIN'], dpdk_vrouter))
env.Alias('build-vrouter-dpdk', env.Install(env['INSTALL_BIN'], dpdk_vrouter))

# Comment the following lines till UT end if the build system doesnt have SSE3
# TODO: Add libpcap-devel, libpcap to buildRequires in spec before enabling this.
if 'vrouter-ut' in COMMAND_LINE_TARGETS:
    vtest = env.Command(
        target = "all_tests.log",
        source = "../utils/vtest/vtest",
        action =
            "./vrouter/utils/vtest/all_tests_run"
                + " -b " + Dir(env['TOP']).abspath
                + " -x vrouter/utils/vtest/tests"
                + " -l $TARGET"
        )
    env.Alias('vrouter-ut', vtest)
    env.Requires(vtest, dpdk_vrouter)

# UT end

# Local Variables:
# mode: python
# End:
